<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiquan Mou</title>
  
  <subtitle>每个不曾起舞的日子，都是对生命的辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mouyiquan.github.io/"/>
  <updated>2019-05-21T09:19:39.805Z</updated>
  <id>https://mouyiquan.github.io/</id>
  
  <author>
    <name>Yiquan Mou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一条SQL查询语句是如何执行的？</title>
    <link href="https://mouyiquan.github.io/2019/05/21/%E4%B8%80%E6%9D%A1SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/"/>
    <id>https://mouyiquan.github.io/2019/05/21/一条SQL查询语句是如何执行的？/</id>
    <published>2019-05-21T01:06:38.000Z</published>
    <updated>2019-05-21T09:19:39.805Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;这个系列的文章是对《MySQL实战45讲-林晓斌》的总结和读后感以及问题讨论的精彩部分，正文非常不错，但让我尤为惊喜的却是各位同仁的评论区博弈，实乃精彩。<br>&emsp;&emsp;在此，感谢林晓斌大佬的这个系列讲解以及各位仁兄的经常问题。<br>&emsp;&emsp;本文乃至本站若有任何侵权问题，还请联系我进行删除，感激不尽。</p><hr><h3 id="文章概况"><a href="#文章概况" class="headerlink" title="文章概况"></a>文章概况</h3><p>&emsp;&emsp;MySQL的基本架构示意图，从中你可以清楚地看到SQL语句在MySQL的各个功能模块中的执行过程。大体来说，MySQL可以分为Server层和存储引擎层两部分。<br><img src="/2019/05/21/一条SQL查询语句是如何执行的？/mysql-basic-frame.png" alt="MySQL基础架构示意图"></p><center>MySQL基础架构示意图</center><h4 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h4><p>&emsp;&emsp;Server层包括连接器、查询缓存、分析器、优化器、执行器等，以及所有内置函数（如日期、时间、数学、加密函数、SUM等）,所有跨存储引擎的功能也都在这一层实现，比如存储过程、触发器、视图等。</p><h5 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h5><p>&emsp;&emsp;连接器负责用客户端建立连接、认证与鉴权、维护和管理连接<br>连接命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure></p><p>连接错误信息：</p><ul><li>Access denied for user 用户名密码错误</li><li>Can’t connect MySQL Server on ‘localhost’  服务未启动，端口错误，防火墙等多方面原因</li></ul><p>&emsp;&emsp;<strong>show processlist</strong>命令用于查看当前MySQL的连接数，其中command列值为sleep的行表示该连接空闲，由于sleep连接线程申请的资源会在该连接关闭时才会释放，过多的sleep经常会造成MySQL占用内存巨增，导致内存占用太大，被系统强行杀掉（OOM[^1]）。<br><img src="/2019/05/21/一条SQL查询语句是如何执行的？/mysql-command-show-processlist.png" alt="MySQL服务当前连接用户状态图"></p><center>MySQL服务当前连接用户状态图</center> <p>&emsp;&emsp;<strong>为什么长连接[^2]如此的占用系统内存，还要尽量使用长连接？</strong></p><ol><li>建立连接的过程[^3]通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</li><li>长连接可以被监控，可以手动断开高内存占用的链接</li></ol><p>&emsp;&emsp;<strong>既然长连接优于短连接，那么如何解决长连接带来的弊端呢？</strong></p><ol><li>定期断开长连接。使用一段时间之后kill掉(eg:kill 5)</li><li>MySQL5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行<strong>mysql_reset_connection</strong>来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态(推荐)。</li><li>修改长连接超时的值wait_timeout(默认8小时),可以将该值设置为一个合理的时间.</li></ol><h5 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h5><p>&emsp;&emsp;MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。</p><p>&emsp;&emsp;<strong>为什么要使用缓存？使用缓存的场景是什么？使用缓存的弊端有哪些？<br>为什么业务逻辑不在代码层面使用缓存而要在数据库层面使用缓存？</strong><br>&emsp;&emsp;众所周知，使用缓存的目的是为了更快的得到自己想要的东西，因为我们知道内存的读取快于硬盘的读取，因为缓存在硬盘的上层，不需要再经过硬盘寻址去重新加载数据进入内存，这同样在其它地方通用。而这也造就了缓存的使用场景是数据的改变不能过于频繁，或则说是不能因为硬盘数据的改变而影响到缓存数据的一致性。<br>&emsp;&emsp;MySQL中如何使用查询缓存？引用原文:查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p><p>&emsp;&emsp;建议将参数query_cache_type设置成DEMAND，默认的SQL语句都不使用查询缓存。确定要使用查询缓存的语句，可以用SQL_CACHE显式指定，像下面这个语句一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select SQL_CACHE * from T where ID=10;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong><p style="color:red;">需要注意的是，MySQL 8.0版本直接将查询缓存的整块功能删掉了，也就是说8.0开始彻底没有这个功能了。</p></strong></p><h5 id="分析器-摘至原文"><a href="#分析器-摘至原文" class="headerlink" title="分析器(摘至原文)"></a>分析器(摘至原文)</h5><p>&emsp;&emsp;如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL需要知道你要做什么，因此需要对SQL语句做解析。<br>&emsp;&emsp;分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识别出里面的字符串分别是什么，代表什么。<br>&emsp;&emsp;MySQL从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名T”，把字符串“ID”识别成“列ID”。<br>&emsp;&emsp;做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。<br>&emsp;&emsp;如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句select少打了开头的字母“s”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; elect * from t where ID=1;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<strong>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</strong></p><h5 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h5><p>&emsp;&emsp;优化器的作用顾名思义就是优化SQL，例如选取合适的索引等。</p><h5 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h5><p>&emsp;&emsp;经过重重难关到了这里，别急，执行器已经知道了你的目的。<br>&emsp;&emsp;既然执行器真正知道了你的目的，那么它会先检查你的权限。<br>&emsp;&emsp;开始执行的时候，要先判断一下你对表有没有执行查询的权限，如果没有，就会返回没有权限的错误(在工程实现上，如果命中查询缓存，会在查询缓存放回结果的时候，做权限验证。查询也会在优化器之前调用precheck验证权限)。<br>&emsp;&emsp;有该表权限，则开表，查看引擎定义，选择对应引擎接口执行对应操作。<br>&emsp;&emsp;比如我们在表T中，ID字段没有索引，那么执行器的执行流程是这样的：</p><ol><li>调用InnoDB引擎接口取这个表的第一行，判断ID值是不是10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>&emsp;&emsp;<strong>至此，Server层我们已经初略走了一遍</strong></p><h4 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h4><p>&emsp;&emsp;存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式。<br>&emsp;&emsp;存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型，而我们在执行器阶段打开表选取引擎接口时就用到了表类型。<br>&emsp;&emsp;MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。<br>&emsp;&emsp;<strong>相关命令：</strong></p><ul><li>show engines; 查看当前MySQL支持的引擎</li><li>show variables like ‘table_type’; 查看当前默认使用的引擎<h5 id="存储引擎分类"><a href="#存储引擎分类" class="headerlink" title="存储引擎分类"></a>存储引擎分类</h5></li><li>InnoDB 默认(5.5.8之后) 支持事务，自动增长列AUTO_INCREMENT，支持行锁，支持外键，多版本并发控制（MVCC）来获得高并发性</li><li>MyISAM  不支持事务，不支持外键，支持全文索引，处理速度快。</li><li>MEMORY 将表中的数据存储在内存中。表结构以文件存储于磁盘。</li><li>其它<h3 id="课后问题"><a href="#课后问题" class="headerlink" title="课后问题"></a>课后问题</h3>&emsp;&emsp;如果表T中没有字段k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？<h3 id="精彩评论区问题"><a href="#精彩评论区问题" class="headerlink" title="精彩评论区问题"></a>精彩评论区问题</h3>&emsp;&emsp;wait_timeout 是客户端 非交互式的连接时间，如果程序连接mysql SERVER，是交互连接,关联的时间参数为interactive_timeout, 这两个时间参数需要尽量一致吗,一般设置多少合适?<br>&emsp;&emsp;答案：是的，这两个尽量设置成相同。值的话取决于业务。如果你面对的是成熟的开发（比如公司内部团队），可以设置小些，分钟级别就行。<br>&emsp;&emsp;query_cache_size 参数虽然不用了,我想确认下,关闭情况是 query_cache_size=0 要匹配参数query_cache_type=off吗？ 还是直接query_cache_size=0 即可？<br>&emsp;&emsp;答案：这两个都可以，不过用query_cache_type会好些（代码判断路径更短）<br>&emsp;&emsp;为什么在执行器阶段还要鉴权，而不在分析器就鉴权？<br>&emsp;&emsp;答案：探索中。<h3 id="以问题的方式进行知识总结，该区域不做解答"><a href="#以问题的方式进行知识总结，该区域不做解答" class="headerlink" title="以问题的方式进行知识总结，该区域不做解答"></a>以问题的方式进行知识总结，该区域不做解答</h3></li></ul><ol><li>MySQL的框架有几个组件, 各是什么作用? </li><li>Server层和存储引擎层各是什么作用?</li><li>you have an error in your SQL syntax 这个保存是在词法分析里还是在语法分析里报错?</li><li>对于表的操作权限验证在哪里进行?</li><li>执行器的执行查询语句的流程是什么样的? </li></ol><p>[^1]: Out Of Memory.<br>[^2]: 我称之能够被大量复用的连接为长连接，很少或一次使用后就关闭的链接为短连接.<br>[^3]: 1.客户端加载驱动2.客户端根据配置发起链接3.MySQL服务端验证用户信息4.MySQL建立成功连接5.MySQL服务端鉴权并返回相关的权限信息6.客户端每次请求带上权限信息</p>]]></content>
    
    <summary type="html">
    
      MySQL从入门到熟练
    
    </summary>
    
      <category term="MySQL" scheme="https://mouyiquan.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL实战45讲-林晓斌" scheme="https://mouyiquan.github.io/tags/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2-%E6%9E%97%E6%99%93%E6%96%8C/"/>
    
      <category term="MySQL进阶" scheme="https://mouyiquan.github.io/tags/MySQL%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>http请求一个网页所经过的所有操作</title>
    <link href="https://mouyiquan.github.io/2017/06/07/http%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5%E6%89%80%E7%BB%8F%E8%BF%87%E7%9A%84%E6%89%80%E6%9C%89%E6%93%8D%E4%BD%9C/"/>
    <id>https://mouyiquan.github.io/2017/06/07/http请求一个网页所经过的所有操作/</id>
    <published>2017-06-07T14:52:44.000Z</published>
    <updated>2019-05-21T01:13:20.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、自己的一个http请求的理解"><a href="#一、自己的一个http请求的理解" class="headerlink" title="一、自己的一个http请求的理解"></a>一、自己的一个http请求的理解</h3><p>1.Chrome搜索自身的DNS缓存<br><code>chrome://net-internals/#dns</code>曾经浏览过的网站的dns<br>2.搜索操作系统自身的DNS缓存(浏览器没有找到缓存或缓存已经失效)<br>3.读取本地的HOST文件<br>4.浏览器发起一个DNS的一个系统调用<br>&emsp;4.1宽带运营商服务器查看本地缓存<br>&emsp;4.2运营商服务器发起一个迭代DNS解析的请求<br>&emsp;&emsp;<code>运营商服务器把结果返回给操作系统内核同时缓存起来</code><br>&emsp;&emsp;<code>操作系统内核把结果返回浏览器</code><br>&emsp;&emsp;<code>最终浏览器拿到了url对应的IP地址</code><br>5.浏览器获得域名对应的IP地址后，发起HTTP”三次握手”<br>6.TCP/IP连接建立起来后，浏览器就可以向服务器发送HTTP请求了。<br>eg:用HTTP的GET方法请求一个根域名里的一个域名，协议可以采用HTTP1.0的一个协议。<br>7.服务器端接受到请求后，根据路径参数，经过后端的一些处理之后，把处理后的一个结果的数据返回给浏览器。如果是一个页面，就会把完整的HTML页面代码返回给浏览器。<br>8.浏览器拿到页面的完整HTML页面代码，在解析和渲染这个页面的时候，里面的JS和CSS、图片静态资源，它们同样也是一个个HTTP请求都需要经过上面的主要的七个步骤。<br>9.浏览器根据拿到的资源对页面进行渲染，最终把一个完整的页面呈献给用户。</p>]]></content>
    
    <summary type="html">
    
      访问一个页面的全过程
    
    </summary>
    
      <category term="Http" scheme="https://mouyiquan.github.io/categories/Http/"/>
    
    
      <category term="Http" scheme="https://mouyiquan.github.io/tags/Http/"/>
    
      <category term="访问url的过程" scheme="https://mouyiquan.github.io/tags/%E8%AE%BF%E9%97%AEurl%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
</feed>
